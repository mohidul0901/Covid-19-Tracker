{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","cardheading","varaint","start","end","value","duration","seperator","Date","toDateString","variant","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","image","src","alt","CountryPicker","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e3443fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1hcUH\",\"card\":\"Cards_card__lfh6k\",\"infected\":\"Cards_infected__1Dnrc\",\"recovered\":\"Cards_recovered__1DHO0\",\"deaths\":\"Cards_deaths__1uWn1\",\"cardheading\":\"Cards_cardheading__1NeaQ\"};","import React from 'react';\r\n\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames'\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup'\r\n\r\n\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return 'loading....';\r\n    }\r\n    return(\r\n        <div className = {styles.container}>\r\n            <Grid container spacing ={3} justify = \"center\">\r\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>\r\n                            <p className = {styles.cardheading}>Infected</p>\r\n                        </Typography>\r\n                        <Typography varaint =\"h5\">\r\n                            <CountUp \r\n                                start = {0}\r\n                                end = {confirmed.value}\r\n                                duration = {2}\r\n                                seperator = \",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant = \"body2\">\r\n                            Number of confirmed cases of Covid-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>\r\n                            <p className = {styles.cardheading}> Recovered </p>\r\n                        </Typography>\r\n                        <Typography varaint =\"h5\">\r\n                        <CountUp \r\n                                start = {0}\r\n                                end = {recovered.value}\r\n                                duration = {2}\r\n                                seperator = \",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}v\r\n                        </Typography>\r\n                        <Typography variant = \"body2\">\r\n                            Number of recovered from Covid-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>\r\n                            <p className = {styles.cardheading}>Deaths</p>\r\n                        </Typography>\r\n                        <Typography varaint =\"h5\">\r\n                        <CountUp \r\n                                start = {0}\r\n                                end = {deaths.value}\r\n                                duration = {2}\r\n                                seperator = \",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant = \"body2\">\r\n                            Number of Deaths caused by Covid-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React, { Component } from 'react';\r\n\r\nimport Cards from './components/Cards/Cards';\r\nimport Chart from './components/Chart/Chart';\r\nimport CountryPicker from './components/CountryPicker/CountryPicker';\r\nimport styles from './App.module.css';\r\n\r\nimport {fetchData} from './api';\r\nimport image from './images/image.png';\r\n\r\nclass App extends Component{\r\n\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n      }\r\n    \r\n      async componentDidMount() {\r\n        const data = await fetchData();\r\n    \r\n        this.setState({ data });\r\n      }\r\n    \r\n      handleCountryChange = async (country) => {\r\n        const data = await fetchData(country);\r\n    \r\n        this.setState({ data, country: country });\r\n      }\r\n    \r\n      render() {\r\n        const { data, country } = this.state;\r\n    \r\n        return (\r\n          <div className={styles.container}>\r\n            <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n            <Cards data={data} />\r\n            <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n            <Chart data={data} country={country} /> \r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    export default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2SP1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3sSzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1WDo0\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}